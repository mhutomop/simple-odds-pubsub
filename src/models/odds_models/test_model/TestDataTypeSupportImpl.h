/* -*- C++ -*- */
/* Generated by opendds_idl version 3.26.1 (ACE version 7.1.1) running on input file TestData.idl */
#ifndef OPENDDS_IDL_GENERATED_TESTDATATYPESUPPORTIMPL_H_Y69GKZ
#define OPENDDS_IDL_GENERATED_TESTDATATYPESUPPORTIMPL_H_Y69GKZ

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 26, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "TestDataC.h"
#include "TestDataTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: HelloWorldData */



/* Begin STRUCT: Msg */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct HelloWorldData_Msg_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<HelloWorldData_Msg_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<HelloWorldData_Msg_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::HelloWorldData::Msg& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::HelloWorldData::Msg& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::HelloWorldData::Msg& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::HelloWorldData::Msg& stru);

bool operator<<(Serializer& strm, const ::HelloWorldData::Msg& stru);

bool operator>>(Serializer& strm,  ::HelloWorldData::Msg& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::HelloWorldData::Msg>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::HelloWorldData::Msg>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::HelloWorldData::Msg>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::HelloWorldData::Msg>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const ::HelloWorldData::Msg>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::HelloWorldData::Msg>& stru);

template <>
struct MarshalTraits< ::HelloWorldData::Msg> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(2);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::HelloWorldData::Msg&) { return false; }
  static bool from_message_block( ::HelloWorldData::Msg&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace HelloWorldData {
/// This structure supports use of std::map with one or more keys.
struct  Msg_OpenDDS_KeyLessThan {
  bool operator()(const  ::HelloWorldData::Msg& v1, const  ::HelloWorldData::Msg& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.user_id < v2.user_id) return true;
    if (v2.user_id < v1.user_id) return false;
    return false;
  }
};
}


namespace HelloWorldData {
class MsgTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::HelloWorldData::Msg> {
  typedef  ::HelloWorldData::Msg MessageType;
  typedef  ::HelloWorldData::MsgSeq MessageSequenceType;
  typedef  ::HelloWorldData::MsgSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::HelloWorldData::MsgTypeSupport TypeSupportType;
  typedef  ::HelloWorldData::MsgTypeSupportImpl TypeSupportImplType;
  typedef  ::HelloWorldData::MsgDataWriter DataWriterType;
  typedef  ::HelloWorldData::MsgDataReader DataReaderType;
  typedef  ::HelloWorldData::Msg_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::HelloWorldData::Msg> KeyOnlyType;
  typedef OpenDDS::DCPS::HelloWorldData_Msg_xtag XtagType;

  static const char* type_name() { return "HelloWorldData::Msg"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace HelloWorldData {
class  MsgTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MsgTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl_T<Msg>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<Msg>
{
public:
  typedef MsgTypeSupport TypeSupportType;
  typedef MsgTypeSupport::_var_type _var_type;
  typedef MsgTypeSupport::_ptr_type _ptr_type;

  MsgTypeSupportImpl() {}
  virtual ~MsgTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const Msg& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const Msg& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, Msg_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, Msg_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static MsgTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::HelloWorldData::Msg>();
bool gen_skip_over(Serializer& ser,  ::HelloWorldData::Msg*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::HelloWorldData::Msg,  ::HelloWorldData::Msg>(DDS::DynamicType_ptr type, const  ::HelloWorldData::Msg& value);

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::HelloWorldData::Msg,  ::HelloWorldData::Msg>(DDS::DynamicType_ptr type,  ::HelloWorldData::Msg& value);

template <>
const  ::HelloWorldData::Msg* get_dynamic_data_adapter_value< ::HelloWorldData::Msg,  ::HelloWorldData::Msg>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Msg */

/* End MODULE: HelloWorldData */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_TESTDATATYPESUPPORTIMPL_H_Y69GKZ */

/* Generated by opendds_idl version 3.26.1 (ACE version 7.1.1) running on input file TestData.idl */
#include "TestDataTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_testdatatypesupportimpl_cpp_dkthjl##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TestData */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<TestData_Message_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(138, 93, 58, 186, 252, 2, 134, 114, 98, 103, 158, 211, 168, 214));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<TestData_Message_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::TestData::Message& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"command",0},{"type",1},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.command = x.c_str();
      }
      break;
    }
    case 1: {
      if (!value_reader.read_uint16(value.type)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::TestData::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("command", true));
  value_writer.write_string(value.command);
  value_writer.end_struct_member();
  value_writer.begin_struct_member(XTypes::MemberDescriptorImpl("type", false));
  value_writer.write_uint16(value.type);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::TestData::Message& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.command = "";
  stru.type = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::TestData::Message& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.command.in()) + 1;
  primitive_serialized_size(encoding, size, stru.type);
}

bool operator<<(Serializer& strm, const ::TestData::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.command.in())
    && (strm << stru.type);
}

bool operator>>(Serializer& strm,  ::TestData::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.command = "";
  } else {
    if (!(strm >> stru.command.out())) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.type = 0;
  } else {
    if (!(strm >> stru.type)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.command.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.command.in());
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.command = "";
  } else {
    if (!(strm >> stru.value.command.out())) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.command.in()) + 1;
}

bool operator<<(Serializer& strm, const KeyOnly<const ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.command.in());
}

bool operator>>(Serializer& strm, const KeyOnly< ::TestData::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.command = "";
  } else {
    if (!(strm >> stru.value.command.out())) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::TestData::Message>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "command")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace TestData {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<MessageTypeSupportImpl> ts_init_TestData_Message;
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::TestData_Message_xtag>();
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::TestData_Message_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::encode_to_string(const Message& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    vwrite(jvw, in);
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::encode_to_bytes(const Message& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::decode_from_string(const char* in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new Message;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t MessageTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, Message_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new Message();
  return ::DDS::RETCODE_UNSUPPORTED;
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::TestData::Message> : MetaStruct {
  typedef  ::TestData::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::TestData::Message& typed = *static_cast<const ::TestData::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "command") == 0) {
      return typed.command.in();
    }
    if (std::strcmp(field, "type") == 0) {
      return typed.type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::TestData::Message)");
  }

  Value getValue(Serializer& strm, const char* field, const TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "command") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'command' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'command' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'command' contents could not be skipped");
      }
    }
    if (base_field == "type") {
      ACE_CDR::UShort val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'type' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  2 )) {
        throw std::runtime_error("Field 'type' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "command") == 0) {
      return make_field_cmp(&T::command, next);
    }
    if (std::strcmp(field, "type") == 0) {
      return make_field_cmp(&T::type, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::TestData::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"command", "type", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "command") == 0) {
      return &static_cast<const T*>(stru)->command;
    }
    if (std::strcmp(field, "type") == 0) {
      return &static_cast<const T*>(stru)->type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::TestData::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "command") == 0) {
      static_cast<T*>(lhs)->command = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "type") == 0) {
      static_cast<T*>(lhs)->type = *static_cast<const  ::CORBA::UShort*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::TestData::Message)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "command") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->command.in(), static_cast<const T*>(rhs)->command.in());
    }
    if (std::strcmp(field, "type") == 0) {
      return static_cast<const T*>(lhs)->type == static_cast<const T*>(rhs)->type;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::TestData::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::TestData::Message>()
{
  static MetaStructImpl< ::TestData::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::TestData::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::TestData::Message>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::TestData::Message,  ::TestData::Message > : public DynamicDataAdapter_T< ::TestData::Message> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::TestData::Message& value)
    : DynamicDataAdapter_T< ::TestData::Message>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::TestData::Message& value)
    : DynamicDataAdapter_T< ::TestData::Message>(type, value)
  {
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  DDS::DynamicData_ptr clone()
  {
    return new DynamicDataAdapterImpl(type_, value_);
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::TestData::Message> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      KeyOnly<const  ::TestData::Message> key_only(value_);
      DCPS::serialized_size(enc, size, key_only);
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::TestData::Message> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      KeyOnly<const  ::TestData::Message> key_only(value_);
      return ser << key_only;
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_s8_raw_value(method, dest, tk, value_.command, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.type, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_s8_raw_value(method, value_.command.inout(), id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.type, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::TestData::Message,  ::TestData::Message>(DDS::DynamicType_ptr type, const  ::TestData::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::TestData::Message,  ::TestData::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::TestData::Message,  ::TestData::Message>(DDS::DynamicType_ptr type,  ::TestData::Message& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::TestData::Message,  ::TestData::Message>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::TestData::Message* get_dynamic_data_adapter_value< ::TestData::Message,  ::TestData::Message>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::TestData::Message,  ::TestData::Message> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Message */

/* End MODULE: TestData */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  const unsigned char to_bytes[] = { 51, 0, 0, 0, 241, 81, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 33, 0, 112, 0, 29, 204, 173, 254, 11, 0, 0, 0, 1, 0, 0, 0, 9, 0, 6, 89, 157, 204, 226  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(138, 93, 58, 186, 252, 2, 134, 114, 98, 103, 158, 211, 168, 214))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

